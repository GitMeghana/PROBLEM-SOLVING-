class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        Map<Integer,Integer> map = new HashMap<>();
        for (int i = 0; i<inorder.length;i++){
            map.put(inorder[i],i);
        }
        TreeNode root = buildTree(preorder,0,preorder.length-1,inorder,0,inorder.length-1,map);
        return root;
    }
    public TreeNode buildTree(int[]preorder,int prestart ,int preEnd, int[]inorder , int instart ,int inEnd,Map<Integer,Integer>map ){
        if (prestart > preEnd  || instart > inEnd){
            return null;
        }
        TreeNode root = new TreeNode(preorder[prestart]);
        int inroot = map.get(root.val);
        int numsLeft = inroot - instart;
        root.left = buildTree(preorder,prestart+1,prestart+numsLeft,inorder,instart,inroot-1,map);
        root.right = buildTree(preorder,prestart+numsLeft+1,preEnd,inorder,inroot+1,inEnd,map);
        return root;
    }
}
