import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int row = in.nextInt();
        int col = in.nextInt();
        int[][] grid = new int [row][col];
        for (int i = 0;i<row;i++){
            for (int j = 0;j<col;j++){
                grid[i][j] = in.nextInt();
                
            }
        }
        System.out.println(new Solution().rotten(grid));
        in.close();
       
    }
public int rotten (int [][] grid){
    if (grid == null || grid.length == 0) return 0;
    int row = grid.length;
    int col = grid[0].length;
    Queue<int[]> queue = new LinkedList<>();
    int countfresh = 0;
    for (int i = 0;i<row;i++){
        for (int j = 0;j<col;j++){
            if (grid[i][j] == 2){
                queue.offer(new int[]{i,j});
            }
            else if (grid[i][j] == 1){
                countfresh++;
            }
        }
    }
    if (countfresh == 0) return 0;
    int count = 0;
    int [][] dirs = {{1,0},{-1,0},{0,1},{0,-1}};
    while(!queue.isEmpty()){
        count++;
        int size = queue.size();
        for (int i = 0;i<size;i++){
            int [] point = queue.poll();
            for (int dir [] : dirs){
                int x = point[0] + dir[0];
                int y = point[1] + dir[1];
                if (x<0 || y< 0 || x>= row || y>= col || grid[x][y] == 0 || grid[x][y] == 2) continue;
                grid[x][y] = 2;
                queue.offer(new int[]{x,y});
                countfresh--;
            }
        }
    }
    return countfresh == 0 ? count-1 : -1;
}
}
